// Code generated by protoc-gen-go-http. DO NOT EDIT.

package account

import (
	context "context"
	mux "github.com/gorilla/mux"
	http1 "github.com/mike955/zebra/pkg/transform/http"
	logrus "github.com/sirupsen/logrus"
	mime "mime"
	http "net/http"
	time "time"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
var _ = new(context.Context)
var _ = new(http.Request)
var _ = mux.NewRouter
var _ = mime.ErrInvalidMediaParameter
var _ = time.Second
var _ = http1.Version
var _ = logrus.New()

type AccountServiceHTTPServer interface {
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)

	Get(context.Context, *GetRequest) (*GetResponse, error)
}

func NewAccountServiceHTTPServer(srv AccountServiceServer, logger *logrus.Entry) http.Handler {
	r := mux.NewRouter()

	r.HandleFunc("/account/new", func(w http.ResponseWriter, r *http.Request) {
		var req GetRequest

		logger.Infof("receive http request")
		contentType, _, _ := mime.ParseMediaType(r.Header.Get("Content-Type"))
		err := http1.DecodeRequest(r, contentType, &req)
		start := time.Now()
		logger, ctx := http1.GenerateAwesomeData(r, logger)

		logger.Infof("receive http request")
		res, err := srv.Get(ctx, &req)
		if err != nil {
			w.Write([]byte(err.Error()))
			return
		}

		err = http1.EncodeResponse(w, contentType, res)
		logger = logger.WithFields(logrus.Fields{
			"cost": time.Now().Sub(start).Seconds(),
		})
		if err != nil {
			logger.Infof("http request failled | err: %s", err.Error())
		} else {
			logger.Infof("http request success")
		}
	}).Methods("POST")

	r.HandleFunc("/account/auth", func(w http.ResponseWriter, r *http.Request) {
		var req AuthRequest

		logger.Infof("receive http request")
		contentType, _, _ := mime.ParseMediaType(r.Header.Get("Content-Type"))
		err := http1.DecodeRequest(r, contentType, &req)
		start := time.Now()
		logger, ctx := http1.GenerateAwesomeData(r, logger)

		logger.Infof("receive http request")
		res, err := srv.Auth(ctx, &req)
		if err != nil {
			w.Write([]byte(err.Error()))
			return
		}

		err = http1.EncodeResponse(w, contentType, res)
		logger = logger.WithFields(logrus.Fields{
			"cost": time.Now().Sub(start).Seconds(),
		})
		if err != nil {
			logger.Infof("http request failled | err: %s", err.Error())
		} else {
			logger.Infof("http request success")
		}
	}).Methods("POST")

	return r
}
